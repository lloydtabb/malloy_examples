import "imdb.malloy"
import "movie_filters.malloy"
import "movie_dashboard.malloy"

// The movie filter filters the movie we are interested in
// The imdb dashboard shows the people involved and the title detail

// co-occurence is generally a pretty hard pattern
//  who does steven spielberg work with?
query: movies + {
  join_one: x is from(movie_filters->spielberg) with tconst
  where: x.tconst != null
}
->  by_name + {
    limit: 20
    order_by: title_count desc
    nest: by_job_list is by_job_category
}

// genre co-occurence.  For Horror movies what
//  genres co-occur.  And some example titles.
query: horror_combo is movies + {
  join_one: x is from( movie_filters->horror) with tconst
  where: x.tconst != null

  // where: tconst exists in people + { where: } -> tconst
}
-> {
  group_by: genre_combo is concat('Horror + ', genres.value)
  aggregate: title_count
  nest: by_title is {
    group_by: primaryTitle, ratings.numVotes
    order_by: 2 desc
    limit: 10
  }
}

query: imdb_dashboard is movies_plus + {
  join_one: x is from(movie_filters -> tomhanks) with tconst
  where: x.tconst != null and startYear < 2010
}
->  {
  nest: works_with is by_name + {
    nest: by_role_list is by_job_category
    limit: 10
    order_by: 4 desc
  }
  nest: title_list_detail is  {
    group_by: primaryTitle, startYear
    order_by: 2 desc
  }
  nest: by_genre_bar_chart is by_genre {
    where: startYear != null
    aggregate: avg_year is startYear.avg()
  }
  nest: titles_dashboard
}


// Genre - Genre, by number of votes
query: movies + {
  join_many: x is from( movies-> {
    group_by: tconst, genres.value
  } ) on tconst = x.tconst
}
->  by_genre + {
  where: genres.value != x.value
  nest: genre is {
    group_by: genre2 is x.value
    nest: by_title_list is {
      group_by: primaryTitle, ratings.numVotes
      order_by: 2 desc
      limit: 10
    }
  }
}
